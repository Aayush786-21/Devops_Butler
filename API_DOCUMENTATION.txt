DevOps Butler - API Documentation
=====================================

Date: 2025-10-28
Last Updated: 2025-10-28 (Updated after Project-Specific Sidebar Implementation)

OVERVIEW:
This document maps all API endpoints to their source files and describes the features implemented in each file.

RECENT CHANGES (2025-10-28):
============================
‚úÖ COMPLETED:
- Fixed 404 errors for /api/deployments endpoint (frontend now calls /deployments correctly)
- Fixed avatar image 404 errors (database cleanup, fallback to initials)
- Implemented project-specific sidebar with Deploy, Configuration, Logs, Domain Config, Environment Variables
- Updated main sidebar navigation: Projects, History, Repositories, Domain, Settings
- Created project cards with clickable functionality
- Added project-specific routing and navigation
- Implemented project configuration page with name, ID, dates, and name change functionality
- Created main Domain page with external links to domain registration sites
- Added comprehensive CSS styling for project cards and project sidebar
- Fixed user authentication state in project-specific sidebar (no more "Guest" or "Not logged in")
- Updated repository workflow: changed from "select repository ‚Üí navigate to deploy" to "import repository ‚Üí create project"
- Added Import button to repository cards that directly creates a project from the repository
- Implemented importRepository() function that creates a deployment without navigating to deploy page

‚ö†Ô∏è KNOWN ISSUES:
- Project-specific sidebar needs testing with actual project data
- Domain configuration functionality needs backend integration
- Environment variables page needs project-specific filtering

üîß WORKING FEATURES:
- User authentication (login/logout)
- Project listing and display
- Avatar image handling with fallback
- WebSocket logs streaming
- Static file serving
- Basic deployment functionality

MAIN APPLICATION FILE:
=====================
File: orchestrator.py
Description: Main FastAPI application with all API endpoints
Lines: ~804

AUTHENTICATION ENDPOINTS:
========================
POST /api/auth/login ‚úÖ WORKING
- File: orchestrator.py (lines ~197-234)
- Feature: User login with JWT token generation
- Dependencies: login.py (User model, password verification)
- Status: Fully functional

POST /api/auth/register ‚úÖ WORKING
- File: orchestrator.py (lines ~235-260)
- Feature: User registration with password hashing
- Dependencies: login.py (User model, password hashing)
- Status: Fully functional

GET /api/user/profile ‚úÖ WORKING
- File: orchestrator.py (lines ~381-391)
- Feature: Get current user profile information
- Dependencies: login.py (get_current_user dependency)
- Status: Fully functional

PUT /api/user/profile ‚úÖ WORKING
- File: orchestrator.py (lines ~392-487)
- Feature: Update user profile including avatar upload
- Dependencies: login.py (User model), static file serving
- Status: Fixed avatar 404 issues, now saves to /images/ directory

DEPLOYMENT ENDPOINTS:
====================
POST /deploy ‚úÖ WORKING
- File: orchestrator.py (lines ~495-641)
- Feature: Deploy a repository using Docker
- Dependencies: simple_pipeline.py (deployment pipeline)
- Status: Fully functional

GET /deployments ‚úÖ WORKING (FIXED)
- File: orchestrator.py (lines ~642-656)
- Feature: List all deployments for current user
- Dependencies: login.py (get_current_user), database.py (Deployment model)
- Status: Fixed frontend to call correct endpoint (was calling /api/deployments)

GET /deployments/clear ‚úÖ WORKING
- File: orchestrator.py (lines ~657-686)
- Feature: Clear all deployments for current user
- Dependencies: login.py (get_current_user), database.py (Deployment model)
- Status: Fully functional

GET /deployment/{trace_id}/logs ‚úÖ WORKING
- File: orchestrator.py (lines ~687-766)
- Feature: Get deployment logs by trace ID
- Dependencies: login.py (get_current_user), database.py (Deployment model)
- Status: Fully functional

PUT /api/projects/{project_id}/name ‚úÖ WORKING
- File: orchestrator.py (lines ~487-520)
- Feature: Update project name (container_name)
- Dependencies: login.py (get_current_user), database.py (Deployment model)
- Status: Fully functional

ENVIRONMENT VARIABLES ENDPOINTS:
===============================
GET /api/env-vars
- File: orchestrator.py (lines ~700-750)
- Feature: List environment variables for user/project
- Dependencies: database.py (EnvironmentVariable model)

POST /api/env-vars
- File: orchestrator.py (lines ~750-800)
- Feature: Create new environment variable
- Dependencies: database.py (EnvironmentVariable model)

PUT /api/env-vars/{env_var_id}
- File: orchestrator.py (lines ~800-850)
- Feature: Update existing environment variable
- Dependencies: database.py (EnvironmentVariable model)

DELETE /api/env-vars/{env_var_id}
- File: orchestrator.py (lines ~850-900)
- Feature: Delete environment variable
- Dependencies: database.py (EnvironmentVariable model)

WEBSOCKET ENDPOINTS:
====================
WS /ws/logs ‚úÖ WORKING (IMPROVED)
- File: orchestrator.py (lines ~767-804)
- Feature: Real-time logs streaming with heartbeat
- Dependencies: WebSocket handling, robust_logging.py
- Status: Improved heartbeat handling, better error handling, reduced reconnection frequency

STATIC FILE SERVING:
===================
/static/* ‚úÖ WORKING
- File: orchestrator.py (lines ~50-100)
- Feature: Serve frontend static files
- Dependencies: FastAPI StaticFiles
- Status: Fully functional

/assets/* ‚úÖ WORKING
- File: orchestrator.py (lines ~50-100)
- Feature: Serve frontend build assets
- Dependencies: FastAPI StaticFiles
- Status: Fully functional

/images/* ‚úÖ WORKING (NEW)
- File: orchestrator.py (lines ~50-100)
- Feature: Serve user avatar images
- Dependencies: FastAPI StaticFiles
- Status: New directory for avatar storage, fully functional

/avatars/* ‚úÖ WORKING (BACKWARD COMPATIBILITY)
- File: orchestrator.py (lines ~50-100)
- Feature: Serve user avatars (backward compatibility)
- Dependencies: FastAPI StaticFiles
- Status: Maintained for backward compatibility

/icons/* ‚úÖ WORKING
- File: orchestrator.py (lines ~50-100)
- Feature: Serve application icons
- Dependencies: FastAPI StaticFiles
- Status: Fully functional

SUPPORTING FILES:
================

File: login.py
Description: User authentication and database models
Features:
- User model definition
- Password hashing and verification
- JWT token generation and validation
- get_current_user dependency

File: database.py
Description: Database configuration and models
Features:
- SQLite database setup
- Deployment model
- EnvironmentVariable model
- Database session management

File: simple_pipeline.py
Description: Deployment pipeline logic
Features:
- Git repository cloning
- Docker image building
- Container management
- Nginx integration (optional)
- Deployment status tracking

File: robust_logging.py
Description: Structured logging system
Features:
- Log levels and categories
- Structured JSON logging
- Performance monitoring
- Audit trail logging

File: robust_error_handler.py
Description: Error handling and monitoring
Features:
- Global exception handling
- Error logging and tracking
- Performance metrics

File: connection_manager.py
Description: WebSocket connection management
Features:
- WebSocket connection pooling
- Real-time communication
- Connection lifecycle management

File: docker_build.py
Description: Docker image building utilities
Features:
- Dockerfile generation
- Image building logic
- Build optimization

File: docker_run.py
Description: Docker container management
Features:
- Container lifecycle management
- Port mapping
- Container monitoring

FRONTEND FILES:
==============

File: frontend/src/js/app.js ‚úÖ UPDATED
Description: Main frontend JavaScript application
Features:
- Single Page Application routing
- Authentication handling
- Project management UI with project-specific sidebar
- Real-time WebSocket communication
- Modal dialogs and forms
- API integration
- Project-specific navigation (Deploy, Configuration, Logs, Domain Config, Environment Variables)
- Project cards with clickable functionality
- Dynamic sidebar switching (main sidebar ‚Üî project sidebar)
- Repository import functionality (importRepository function)
- User profile loading in project sidebar (loadUserProfileIntoProjectSidebar)
Status: Major update with project-specific sidebar, authentication fixes, and repository import workflow

File: frontend/src/index.html ‚úÖ UPDATED
Description: Main HTML template
Features:
- Application structure
- Updated main sidebar navigation (Projects, History, Repositories, Domain, Settings)
- Modal definitions
- Page layouts
- New main Domain page with external links
Status: Updated navigation structure

File: frontend/src/css/styles.css ‚úÖ UPDATED
Description: Application styling
Features:
- Modern UI design
- Responsive layout
- Component styling
- Dark/light theme support
- Project card styling with hover effects
- Project sidebar styling
- Project configuration page styling
- Domain configuration page styling
Status: Added comprehensive styling for new project features

File: frontend/src/js/auth.js
Description: Authentication utilities
Features:
- JWT token management
- Login/logout functionality
- Session handling

File: frontend/src/js/repository-api.js
Description: Repository management API calls
Features:
- Git repository integration
- Repository listing
- Repository operations

File: frontend/src/js/repository-tree.js
Description: Repository file tree visualization
Features:
- File tree rendering
- Directory navigation
- File operations

File: frontend/src/js/repository-integration.js
Description: Repository integration utilities
Features:
- GitHub integration
- Repository cloning
- Branch management

CONFIGURATION FILES:
===================

File: requirements.txt
Description: Python dependencies
Features:
- FastAPI and dependencies
- Database libraries
- Docker integration
- Authentication libraries

File: frontend/package.json
Description: Frontend dependencies
Features:
- Vite build system
- JavaScript libraries
- Build scripts

File: dockerfile_templates/
Description: Dockerfile templates for different frameworks
Features:
- Django Dockerfile
- Flask Dockerfile
- Next.js Dockerfile
- Node.js Dockerfile
- React Dockerfile

STATUS: Initial documentation created - will be updated as features are added/modified
